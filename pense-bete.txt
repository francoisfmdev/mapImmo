
//Route qui utilise le middleware sans l'appeler
// Route pour vérifier le mot de passe saisi (utilise la méthode POST)
// Route::post('/checkPassword', function (Illuminate\Http\Request $request) {
//     $desiredPassword = 'Azerty06!';
//     $enteredPassword = $request->input('password');

//     if ($enteredPassword !== $desiredPassword) {
//         return redirect()->route('badPassword')->withErrors(['password' => 'Mot de passe incorrect']); // Redirection si mdp faux
//     }
//     session()->flash('status', 'Mot de passe correct');
//     return redirect()->route('home'); // Redirection si mot de passe OK
// })->name('checkPassword');



// Route protégée par mot de passe (utilise la méthode GET pour afficher le formulaire)
// Route::middleware('password.protect')->get('/', function () {
//     return view('password.pageProtected');
// })->name('pageProtected');
// Route::post('/checkPassword', function () {
//     return redirect()->route('home');
// })->middleware('password.protect')->name('checkPassword');
// // Route pour afficher la vue "password.badPassword"
// Route::get('/badPassword', function () {
//     return view('password.badPassword');
// })->name('badPassword');


// function createMarkers(data, map, cities) {
    const timeMarker = 200
    let delay = 0
    const mapCity = data
    console.log(cities)
    //fonction de tri
    for (const city of cities) {
        for (const sci of data) {       
            for (const addressProperty of sci.user_properties_with_addresses) {
                console.log(city.city + ' in if')            
                const fillColor = sci.color || 'gray'; // Utilisez une couleur par défaut 'gray' si la couleur n'est pas définie
                // Utilisez l'URL du fichier SVG sans remplacer la couleur dans le contenu du SVG
                const svgContent = `
             <svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" >
             <circle cx="3.5" cy="3.5" r="3" fill="${fillColor}" />
             </svg>`;

                // Utilisez la couleur de remplissage fillColor pour le marqueur
                const icon = {
                    url: `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(svgContent)}`,
                    fillColor: fillColor, // Utilisez la couleur déterminée
                    fillOpacity: 1,
                    scale: 1,
                    // Point d'ancrage pour centrer le marqueur
                };
                setTimeout(() => {
                    const mark = new google.maps.Marker({
                        position: new google.maps.LatLng(addressProperty.address.latitude, addressProperty.address.longitude),
                        map: map,
                        title: "",
                        icon: icon,
                        optimized: false,
                        sci: sci.name,
                    });

                    markers.push(mark);
                }, delay)
                delay += timeMarker

            }     
        // setTimeout(() => {
                    //   parcourirEnBoucleAvecPause(city , map)
        //               }, time)
        }       
    }
    return markers;
}
